{
	"language": "Solidity",
	"sources": {
		"contracts/FundMe.sol": {
			"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport './PriceConverter.sol';\n\nerror FundMe__NotOwner();\n\n/**\n * @title A contract for crowd funding\n * @author Fendross\n * @notice This contract is to demo a sample funding contract\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n\tusing PriceConverter for uint256;\n\n\tuint256 public constant MINIMUM_USD = 50 * 1e18;\n\taddress[] public s_funders;\n\tmapping(address => uint256) public s_addressToAmountFunded;\n\taddress private immutable i_owner;\n\n\tAggregatorV3Interface public s_priceFeed;\n\n\tmodifier onlyOwner() {\n\t\tif (msg.sender != i_owner) revert FundMe__NotOwner();\n\t\t_;\n\t}\n\n\tconstructor(address s_priceFeedAddress) {\n\t\ti_owner = msg.sender;\n\t\ts_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n\t}\n\n\t// what if someone sends eth here without calling fund()?\n\t// receive and fallback\n\treceive() external payable {\n\t\tfund();\n\t}\n\n\tfallback() external payable {\n\t\tfund();\n\t}\n\n\t/**\n\t * @notice This function funds this contract\n\t * @dev Implements price feeds\n\t */\n\tfunction fund() public payable {\n\t\t// msg.value is considered the first parameter of the library functions\n\t\trequire(\n\t\t\tmsg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n\t\t\t\"Didn't send enough!\"\n\t\t); // 1e18 = 10 ** 18, ETH has 18 decimals\n\t\ts_funders.push(msg.sender);\n\t\ts_addressToAmountFunded[msg.sender] += msg.value;\n\t}\n\n\t/**\n\t * @dev allows only the owner to withdraw the contract's balance\n\t */\n\tfunction withdraw() public onlyOwner {\n\t\t// require(msg.sender == owner, 'Sender is not owner!');\n\n\t\tfor (\n\t\t\tuint256 funderIndex = 0;\n\t\t\tfunderIndex < s_funders.length;\n\t\t\tfunderIndex++\n\t\t) {\n\t\t\taddress funder = s_funders[funderIndex];\n\t\t\ts_addressToAmountFunded[funder] = 0;\n\t\t}\n\n\t\t// reset an array: new type[](amoutOfObjectsToStart)\n\t\ts_funders = new address[](0);\n\n\t\t// payable(msg.sender).transfer(address(this).balance);\n\n\t\t// bool sendSuccess = payable(msg.sender).send(address(this).balance);\n\t\t// require(sendSuccess, 'Send failed');\n\n\t\t// call, recommended\n\t\t(\n\t\t\tbool callSuccess, /* bytes memory dataReturned */\n\n\t\t) = payable(msg.sender).call{value: address(this).balance}('');\n\t\trequire(callSuccess, 'Failed');\n\t}\n\n\t/**\n\t * @dev this function implements a first gas optimization saving the s_funders to memory and reading from that instead\n\t */\n\tfunction cheaperWithdraw() public payable onlyOwner {\n\t\taddress[] memory funders = s_funders;\n\n\t\tfor (\n\t\t\tuint256 funderIndex = 0;\n\t\t\tfunderIndex < funders.length;\n\t\t\tfunderIndex++\n\t\t) {\n\t\t\taddress funder = funders[funderIndex];\n\t\t\ts_addressToAmountFunded[funder] = 0;\n\t\t}\n\n\t\ts_funders = new address[](0);\n\n\t\t(bool success, ) = i_owner.call{value: address(this).balance}('');\n\t\trequire(success);\n\t}\n\n\t// Getter functions (view / pure)\n\tfunction getOwner() public view returns (address) {\n\t\treturn i_owner;\n\t}\n\n\tfunction getFunder(uint256 index) public view returns (address) {\n\t\treturn s_funders[index];\n\t}\n\n\tfunction getAddressToAmountFunded(address funder)\n\t\tpublic\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\treturn s_addressToAmountFunded[funder];\n\t}\n\n\tfunction getPriceFeed() public view returns (AggregatorV3Interface) {\n\t\treturn s_priceFeed;\n\t}\n}\n"
		},
		"contracts/PriceConverter.sol": {
			"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\n\n// Can't have state variables and can't send ether, all func will be internal\nlibrary PriceConverter {\n\tfunction getPrice(AggregatorV3Interface priceFeed)\n\t\tinternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\t// We're interacting with a contract outside the project --> address (0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e)\n\t\t// and ABI\n\t\t(, int256 price, , , ) = priceFeed.latestRoundData();\n\n\t\treturn uint256(price * 1e10); // price of ETH in terms of USD\n\t}\n\n\tfunction getConversionRate(\n\t\tuint256 ethAmount,\n\t\tAggregatorV3Interface priceFeed\n\t) internal view returns (uint256) {\n\t\tuint256 ethPrice = getPrice(priceFeed);\n\t\tuint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // because they'd have 36 digits\n\t\treturn ethAmountInUsd;\n\t}\n}\n"
		},
		"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
		}
	},
	"settings": {
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"evm.bytecode",
					"evm.deployedBytecode",
					"evm.methodIdentifiers",
					"metadata",
					"devdoc",
					"userdoc",
					"storageLayout",
					"evm.gasEstimates"
				],
				"": ["ast"]
			}
		},
		"metadata": {
			"useLiteralContent": true
		}
	}
}
