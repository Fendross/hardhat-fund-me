{
	"address": "0xE807062F9d082F94518Ee1336f85f5EC94AAFaDb",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "s_priceFeedAddress",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [],
			"name": "FundMe__NotOwner",
			"type": "error"
		},
		{
			"stateMutability": "payable",
			"type": "fallback"
		},
		{
			"inputs": [],
			"name": "MINIMUM_USD",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "cheaperWithdraw",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "fund",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "funder",
					"type": "address"
				}
			],
			"name": "getAddressToAmountFunded",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "index",
					"type": "uint256"
				}
			],
			"name": "getFunder",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getOwner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getPriceFeed",
			"outputs": [
				{
					"internalType": "contract AggregatorV3Interface",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "s_addressToAmountFunded",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"name": "s_funders",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "s_priceFeed",
			"outputs": [
				{
					"internalType": "contract AggregatorV3Interface",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"stateMutability": "payable",
			"type": "receive"
		}
	],
	"transactionHash": "0xbbc85c8d265c376bcf96549848fbe206718ad575f924cd25f7b23889937398fd",
	"receipt": {
		"to": null,
		"from": "0x64c22478bb68fE4FDe6602428C6a0615Aa0eC95b",
		"contractAddress": "0xE807062F9d082F94518Ee1336f85f5EC94AAFaDb",
		"transactionIndex": 24,
		"gasUsed": "1106518",
		"logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"blockHash": "0xd581f9313bfb38dab80d45c9d6581a5ff41bc3a431ca0162eea787d383e3f5e5",
		"transactionHash": "0xbbc85c8d265c376bcf96549848fbe206718ad575f924cd25f7b23889937398fd",
		"logs": [],
		"blockNumber": 7691791,
		"cumulativeGasUsed": "2814429",
		"status": 1,
		"byzantium": true
	},
	"args": ["0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"],
	"numDeployments": 2,
	"solcInputHash": "6e1655892b22c945d48d687d4ea572d6",
	"metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Fendross\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"cheaperWithdraw()\":{\"details\":\"this function implements a first gas optimization saving the s_funders to memory and reading from that instead\"},\"fund()\":{\"details\":\"Implements price feeds\"},\"withdraw()\":{\"details\":\"allows only the owner to withdraw the contract's balance\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport './PriceConverter.sol';\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Fendross\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n\\tusing PriceConverter for uint256;\\n\\n\\tuint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\taddress[] public s_funders;\\n\\tmapping(address => uint256) public s_addressToAmountFunded;\\n\\taddress private immutable i_owner;\\n\\n\\tAggregatorV3Interface public s_priceFeed;\\n\\n\\tmodifier onlyOwner() {\\n\\t\\tif (msg.sender != i_owner) revert FundMe__NotOwner();\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address s_priceFeedAddress) {\\n\\t\\ti_owner = msg.sender;\\n\\t\\ts_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n\\t}\\n\\n\\t// what if someone sends eth here without calling fund()?\\n\\t// receive and fallback\\n\\treceive() external payable {\\n\\t\\tfund();\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\tfund();\\n\\t}\\n\\n\\t/**\\n\\t * @notice This function funds this contract\\n\\t * @dev Implements price feeds\\n\\t */\\n\\tfunction fund() public payable {\\n\\t\\t// msg.value is considered the first parameter of the library functions\\n\\t\\trequire(\\n\\t\\t\\tmsg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n\\t\\t\\t\\\"Didn't send enough!\\\"\\n\\t\\t); // 1e18 = 10 ** 18, ETH has 18 decimals\\n\\t\\ts_funders.push(msg.sender);\\n\\t\\ts_addressToAmountFunded[msg.sender] += msg.value;\\n\\t}\\n\\n\\t/**\\n\\t * @dev allows only the owner to withdraw the contract's balance\\n\\t */\\n\\tfunction withdraw() public onlyOwner {\\n\\t\\t// require(msg.sender == owner, 'Sender is not owner!');\\n\\n\\t\\tfor (\\n\\t\\t\\tuint256 funderIndex = 0;\\n\\t\\t\\tfunderIndex < s_funders.length;\\n\\t\\t\\tfunderIndex++\\n\\t\\t) {\\n\\t\\t\\taddress funder = s_funders[funderIndex];\\n\\t\\t\\ts_addressToAmountFunded[funder] = 0;\\n\\t\\t}\\n\\n\\t\\t// reset an array: new type[](amoutOfObjectsToStart)\\n\\t\\ts_funders = new address[](0);\\n\\n\\t\\t// payable(msg.sender).transfer(address(this).balance);\\n\\n\\t\\t// bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n\\t\\t// require(sendSuccess, 'Send failed');\\n\\n\\t\\t// call, recommended\\n\\t\\t(\\n\\t\\t\\tbool callSuccess, /* bytes memory dataReturned */\\n\\n\\t\\t) = payable(msg.sender).call{value: address(this).balance}('');\\n\\t\\trequire(callSuccess, 'Failed');\\n\\t}\\n\\n\\t/**\\n\\t * @dev this function implements a first gas optimization saving the s_funders to memory and reading from that instead\\n\\t */\\n\\tfunction cheaperWithdraw() public payable onlyOwner {\\n\\t\\taddress[] memory funders = s_funders;\\n\\n\\t\\tfor (\\n\\t\\t\\tuint256 funderIndex = 0;\\n\\t\\t\\tfunderIndex < funders.length;\\n\\t\\t\\tfunderIndex++\\n\\t\\t) {\\n\\t\\t\\taddress funder = funders[funderIndex];\\n\\t\\t\\ts_addressToAmountFunded[funder] = 0;\\n\\t\\t}\\n\\n\\t\\ts_funders = new address[](0);\\n\\n\\t\\t(bool success, ) = i_owner.call{value: address(this).balance}('');\\n\\t\\trequire(success);\\n\\t}\\n\\n\\t// Getter functions (view / pure)\\n\\tfunction getOwner() public view returns (address) {\\n\\t\\treturn i_owner;\\n\\t}\\n\\n\\tfunction getFunder(uint256 index) public view returns (address) {\\n\\t\\treturn s_funders[index];\\n\\t}\\n\\n\\tfunction getAddressToAmountFunded(address funder)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn s_addressToAmountFunded[funder];\\n\\t}\\n\\n\\tfunction getPriceFeed() public view returns (AggregatorV3Interface) {\\n\\t\\treturn s_priceFeed;\\n\\t}\\n}\\n\",\"keccak256\":\"0xa614db3b759a64c56929d18139a3dc6051a74997bd7518319451aac61b01cf47\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\n// Can't have state variables and can't send ether, all func will be internal\\nlibrary PriceConverter {\\n\\tfunction getPrice(AggregatorV3Interface priceFeed)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// We're interacting with a contract outside the project --> address (0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e)\\n\\t\\t// and ABI\\n\\t\\t(, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n\\t\\treturn uint256(price * 1e10); // price of ETH in terms of USD\\n\\t}\\n\\n\\tfunction getConversionRate(\\n\\t\\tuint256 ethAmount,\\n\\t\\tAggregatorV3Interface priceFeed\\n\\t) internal view returns (uint256) {\\n\\t\\tuint256 ethPrice = getPrice(priceFeed);\\n\\t\\tuint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // because they'd have 36 digits\\n\\t\\treturn ethAmountInUsd;\\n\\t}\\n}\\n\",\"keccak256\":\"0x5917e27438e8b988a3ec8870802869d1d5e643829e1d5c2edccc23ee5f0105b6\",\"license\":\"MIT\"}},\"version\":1}",
	"bytecode": "0x60a06040523480156200001157600080fd5b506040516200142d3803806200142d833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6112a76200018660003960008181610448015281816106d601528181610726015261091c01526112a76000f3fe6080604052600436106100a05760003560e01c80636b69a592116100645780636b69a592146101b2578063893d20e8146101dd5780639e87a5cd14610208578063b60d428814610233578063be2693f01461023d578063d7b4750c14610247576100af565b80630343fb25146100b95780630ec3b027146100f65780631bf6132d146101215780633ccfd60b1461015e57806354861af714610175576100af565b366100af576100ad610284565b005b6100b7610284565b005b3480156100c557600080fd5b506100e060048036038101906100db9190610bdf565b6103bf565b6040516100ed9190610c25565b60405180910390f35b34801561010257600080fd5b5061010b610408565b6040516101189190610c9f565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190610bdf565b61042e565b6040516101559190610c25565b60405180910390f35b34801561016a57600080fd5b50610173610446565b005b34801561018157600080fd5b5061019c60048036038101906101979190610ce6565b610686565b6040516101a99190610d22565b60405180910390f35b3480156101be57600080fd5b506101c76106c5565b6040516101d49190610c25565b60405180910390f35b3480156101e957600080fd5b506101f26106d2565b6040516101ff9190610d22565b60405180910390f35b34801561021457600080fd5b5061021d6106fa565b60405161022a9190610c9f565b60405180910390f35b61023b610284565b005b610245610724565b005b34801561025357600080fd5b5061026e60048036038101906102699190610ce6565b6109b2565b60405161027b9190610d22565b60405180910390f35b6802b5e3af16b18800006102c3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109f990919063ffffffff16565b1015610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb90610d9a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103b69190610de9565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104cb576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156105765760008082815481106104f0576104ef610e3f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061056e90610e6e565b9150506104ce565b50600067ffffffffffffffff81111561059257610591610eb7565b5b6040519080825280602002602001820160405280156105c05781602001602082028036833780820191505090505b50600090805190602001906105d6929190610ad5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105fd90610f17565b60006040518083038185875af1925050503d806000811461063a576040519150601f19603f3d011682016040523d82523d6000602084013e61063f565b606091505b5050905080610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610f78565b60405180910390fd5b50565b6000818154811061069657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107a9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561082c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107e2575b5050505050905060005b81518110156108b757600082828151811061085457610853610e3f565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108af90610e6e565b915050610836565b50600067ffffffffffffffff8111156108d3576108d2610eb7565b5b6040519080825280602002602001820160405280156109015781602001602082028036833780820191505090505b5060009080519060200190610917929190610ad5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161095e90610f17565b60006040518083038185875af1925050503d806000811461099b576040519150601f19603f3d011682016040523d82523d6000602084013e6109a0565b606091505b50509050806109ae57600080fd5b5050565b60008082815481106109c7576109c6610e3f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a0583610a35565b90506000670de0b6b3a76400008583610a1e9190610f98565b610a289190611021565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a7e57600080fd5b505afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab691906110df565b5050509150506402540be40081610acd919061115a565b915050919050565b828054828255906000526020600020908101928215610b4e579160200282015b82811115610b4d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610af5565b5b509050610b5b9190610b5f565b5090565b5b80821115610b78576000816000905550600101610b60565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bac82610b81565b9050919050565b610bbc81610ba1565b8114610bc757600080fd5b50565b600081359050610bd981610bb3565b92915050565b600060208284031215610bf557610bf4610b7c565b5b6000610c0384828501610bca565b91505092915050565b6000819050919050565b610c1f81610c0c565b82525050565b6000602082019050610c3a6000830184610c16565b92915050565b6000819050919050565b6000610c65610c60610c5b84610b81565b610c40565b610b81565b9050919050565b6000610c7782610c4a565b9050919050565b6000610c8982610c6c565b9050919050565b610c9981610c7e565b82525050565b6000602082019050610cb46000830184610c90565b92915050565b610cc381610c0c565b8114610cce57600080fd5b50565b600081359050610ce081610cba565b92915050565b600060208284031215610cfc57610cfb610b7c565b5b6000610d0a84828501610cd1565b91505092915050565b610d1c81610ba1565b82525050565b6000602082019050610d376000830184610d13565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610d84601383610d3d565b9150610d8f82610d4e565b602082019050919050565b60006020820190508181036000830152610db381610d77565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df482610c0c565b9150610dff83610c0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e3457610e33610dba565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e7982610c0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610eac57610eab610dba565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f01600083610ee6565b9150610f0c82610ef1565b600082019050919050565b6000610f2282610ef4565b9150819050919050565b7f4661696c65640000000000000000000000000000000000000000000000000000600082015250565b6000610f62600683610d3d565b9150610f6d82610f2c565b602082019050919050565b60006020820190508181036000830152610f9181610f55565b9050919050565b6000610fa382610c0c565b9150610fae83610c0c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fe757610fe6610dba565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061102c82610c0c565b915061103783610c0c565b92508261104757611046610ff2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61107181611052565b811461107c57600080fd5b50565b60008151905061108e81611068565b92915050565b6000819050919050565b6110a781611094565b81146110b257600080fd5b50565b6000815190506110c48161109e565b92915050565b6000815190506110d981610cba565b92915050565b600080600080600060a086880312156110fb576110fa610b7c565b5b60006111098882890161107f565b955050602061111a888289016110b5565b945050604061112b888289016110ca565b935050606061113c888289016110ca565b925050608061114d8882890161107f565b9150509295509295909350565b600061116582611094565b915061117083611094565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111af576111ae610dba565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111ec576111eb610dba565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561122957611228610dba565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561126657611265610dba565b5b82820290509291505056fea2646970667358221220db7182cdbd80397b76238e6982cb586cda527d31f2ff563f4b999ca537be48ed64736f6c63430008080033",
	"deployedBytecode": "0x6080604052600436106100a05760003560e01c80636b69a592116100645780636b69a592146101b2578063893d20e8146101dd5780639e87a5cd14610208578063b60d428814610233578063be2693f01461023d578063d7b4750c14610247576100af565b80630343fb25146100b95780630ec3b027146100f65780631bf6132d146101215780633ccfd60b1461015e57806354861af714610175576100af565b366100af576100ad610284565b005b6100b7610284565b005b3480156100c557600080fd5b506100e060048036038101906100db9190610bdf565b6103bf565b6040516100ed9190610c25565b60405180910390f35b34801561010257600080fd5b5061010b610408565b6040516101189190610c9f565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190610bdf565b61042e565b6040516101559190610c25565b60405180910390f35b34801561016a57600080fd5b50610173610446565b005b34801561018157600080fd5b5061019c60048036038101906101979190610ce6565b610686565b6040516101a99190610d22565b60405180910390f35b3480156101be57600080fd5b506101c76106c5565b6040516101d49190610c25565b60405180910390f35b3480156101e957600080fd5b506101f26106d2565b6040516101ff9190610d22565b60405180910390f35b34801561021457600080fd5b5061021d6106fa565b60405161022a9190610c9f565b60405180910390f35b61023b610284565b005b610245610724565b005b34801561025357600080fd5b5061026e60048036038101906102699190610ce6565b6109b2565b60405161027b9190610d22565b60405180910390f35b6802b5e3af16b18800006102c3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109f990919063ffffffff16565b1015610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb90610d9a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103b69190610de9565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104cb576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156105765760008082815481106104f0576104ef610e3f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061056e90610e6e565b9150506104ce565b50600067ffffffffffffffff81111561059257610591610eb7565b5b6040519080825280602002602001820160405280156105c05781602001602082028036833780820191505090505b50600090805190602001906105d6929190610ad5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105fd90610f17565b60006040518083038185875af1925050503d806000811461063a576040519150601f19603f3d011682016040523d82523d6000602084013e61063f565b606091505b5050905080610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610f78565b60405180910390fd5b50565b6000818154811061069657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107a9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561082c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107e2575b5050505050905060005b81518110156108b757600082828151811061085457610853610e3f565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108af90610e6e565b915050610836565b50600067ffffffffffffffff8111156108d3576108d2610eb7565b5b6040519080825280602002602001820160405280156109015781602001602082028036833780820191505090505b5060009080519060200190610917929190610ad5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161095e90610f17565b60006040518083038185875af1925050503d806000811461099b576040519150601f19603f3d011682016040523d82523d6000602084013e6109a0565b606091505b50509050806109ae57600080fd5b5050565b60008082815481106109c7576109c6610e3f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a0583610a35565b90506000670de0b6b3a76400008583610a1e9190610f98565b610a289190611021565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a7e57600080fd5b505afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab691906110df565b5050509150506402540be40081610acd919061115a565b915050919050565b828054828255906000526020600020908101928215610b4e579160200282015b82811115610b4d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610af5565b5b509050610b5b9190610b5f565b5090565b5b80821115610b78576000816000905550600101610b60565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bac82610b81565b9050919050565b610bbc81610ba1565b8114610bc757600080fd5b50565b600081359050610bd981610bb3565b92915050565b600060208284031215610bf557610bf4610b7c565b5b6000610c0384828501610bca565b91505092915050565b6000819050919050565b610c1f81610c0c565b82525050565b6000602082019050610c3a6000830184610c16565b92915050565b6000819050919050565b6000610c65610c60610c5b84610b81565b610c40565b610b81565b9050919050565b6000610c7782610c4a565b9050919050565b6000610c8982610c6c565b9050919050565b610c9981610c7e565b82525050565b6000602082019050610cb46000830184610c90565b92915050565b610cc381610c0c565b8114610cce57600080fd5b50565b600081359050610ce081610cba565b92915050565b600060208284031215610cfc57610cfb610b7c565b5b6000610d0a84828501610cd1565b91505092915050565b610d1c81610ba1565b82525050565b6000602082019050610d376000830184610d13565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610d84601383610d3d565b9150610d8f82610d4e565b602082019050919050565b60006020820190508181036000830152610db381610d77565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df482610c0c565b9150610dff83610c0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e3457610e33610dba565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e7982610c0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610eac57610eab610dba565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f01600083610ee6565b9150610f0c82610ef1565b600082019050919050565b6000610f2282610ef4565b9150819050919050565b7f4661696c65640000000000000000000000000000000000000000000000000000600082015250565b6000610f62600683610d3d565b9150610f6d82610f2c565b602082019050919050565b60006020820190508181036000830152610f9181610f55565b9050919050565b6000610fa382610c0c565b9150610fae83610c0c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fe757610fe6610dba565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061102c82610c0c565b915061103783610c0c565b92508261104757611046610ff2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61107181611052565b811461107c57600080fd5b50565b60008151905061108e81611068565b92915050565b6000819050919050565b6110a781611094565b81146110b257600080fd5b50565b6000815190506110c48161109e565b92915050565b6000815190506110d981610cba565b92915050565b600080600080600060a086880312156110fb576110fa610b7c565b5b60006111098882890161107f565b955050602061111a888289016110b5565b945050604061112b888289016110ca565b935050606061113c888289016110ca565b925050608061114d8882890161107f565b9150509295509295909350565b600061116582611094565b915061117083611094565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111af576111ae610dba565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111ec576111eb610dba565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561122957611228610dba565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561126657611265610dba565b5b82820290509291505056fea2646970667358221220db7182cdbd80397b76238e6982cb586cda527d31f2ff563f4b999ca537be48ed64736f6c63430008080033",
	"devdoc": {
		"author": "Fendross",
		"details": "This implements price feeds as our library",
		"kind": "dev",
		"methods": {
			"cheaperWithdraw()": {
				"details": "this function implements a first gas optimization saving the s_funders to memory and reading from that instead"
			},
			"fund()": {
				"details": "Implements price feeds"
			},
			"withdraw()": {
				"details": "allows only the owner to withdraw the contract's balance"
			}
		},
		"title": "A contract for crowd funding",
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {
			"fund()": {
				"notice": "This function funds this contract"
			}
		},
		"notice": "This contract is to demo a sample funding contract",
		"version": 1
	},
	"storageLayout": {
		"storage": [
			{
				"astId": 62,
				"contract": "contracts/FundMe.sol:FundMe",
				"label": "s_funders",
				"offset": 0,
				"slot": "0",
				"type": "t_array(t_address)dyn_storage"
			},
			{
				"astId": 66,
				"contract": "contracts/FundMe.sol:FundMe",
				"label": "s_addressToAmountFunded",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 71,
				"contract": "contracts/FundMe.sol:FundMe",
				"label": "s_priceFeed",
				"offset": 0,
				"slot": "2",
				"type": "t_contract(AggregatorV3Interface)45"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_array(t_address)dyn_storage": {
				"base": "t_address",
				"encoding": "dynamic_array",
				"label": "address[]",
				"numberOfBytes": "32"
			},
			"t_contract(AggregatorV3Interface)45": {
				"encoding": "inplace",
				"label": "contract AggregatorV3Interface",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	}
}
